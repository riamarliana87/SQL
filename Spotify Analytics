# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name
ORDER BY avg(popularity) DESC

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10

#I want to calculate the average popularity on the Spotify data table with avg popularity 90 or above. I would like to use CTE to solve this problem.
WITH popularity_avg_CTE AS(
    SELECT artist_name, AVG(popularity) AS avg_pop
    FROM Spotifydata
    GROUP BY artist_name
    HAVING avg_pop >=90
    )
SELECT artist_name,avg_pop,'Top Star' AS tag FROM popularity_avg_CTE
ORDER BY avg_pop DESC;
